// src/components/Docs.tsx
import React from 'react';

const Docs: React.FC = () => {
  return (
    <div className="max-w-4xl mx-auto p-6 bg-white shadow-lg rounded-lg mt-4 mb-12">
      <h1 className="text-3xl font-semibold text-center text-blue-600 mb-6">Deepfake Audio Detection Application</h1>
      <p className="text-lg text-gray-700 mb-6">
        This project provides a ReactJS + TypeScript-based web application for detecting deepfake audio. 
        The frontend interacts with a backend model to classify whether the audio is real or fake.
      </p>

      <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">Table of Contents</h2>
      <ul className="list-disc pl-6 text-gray-700">
        <li><a href="#project-overview" className="text-blue-500 hover:underline">Project Overview</a></li>
        <li><a href="#technologies-used" className="text-blue-500 hover:underline">Technologies Used</a></li>
        <li><a href="#setup-instructions" className="text-blue-500 hover:underline">Setup Instructions</a></li>
        <li><a href="#folder-structure" className="text-blue-500 hover:underline">Folder Structure</a></li>
        <li><a href="#components-overview" className="text-blue-500 hover:underline">Components Overview</a></li>
        <li><a href="#api-integration" className="text-blue-500 hover:underline">API Integration</a></li>
        <li><a href="#websocket-integration" className="text-blue-500 hover:underline">WebSocket Integration</a></li>
        <li><a href="#running-the-application" className="text-blue-500 hover:underline">Running the Application</a></li>
        <li><a href="#usage" className="text-blue-500 hover:underline">Usage</a></li>
        <li><a href="#future-improvements" className="text-blue-500 hover:underline">Future Improvements</a></li>
      </ul>

      <h2 id="project-overview" className="text-2xl font-semibold text-blue-500 mt-8">Project Overview</h2>
      <p className="text-lg text-gray-700 mb-4">
        The Deepfake Audio Detection project uses machine learning models to analyze audio files and detect 
        whether the voice is generated by AI (deepfake) or is from a real human. This application is designed to:
      </p>
      <ol className="list-decimal pl-8 text-gray-700 mb-4">
        <li>Record audio in 5-second intervals.</li>
        <li>Send the recorded audio data to a backend server via WebSocket.</li>
        <li>The server processes the audio, classifies it using a trained model, and returns the result.</li>
        <li>Display the classification result in the UI (Real or Fake).</li>
      </ol>

      <h2 id="technologies-used" className="text-2xl font-semibold text-blue-500 mt-8">Technologies Used</h2>
      <ul className="list-disc pl-6 text-gray-700">
        <li><strong>ReactJS</strong> - A JavaScript library for building user interfaces.</li>
        <li><strong>TypeScript</strong> - A superset of JavaScript that adds static typing.</li>
        <li><strong>WebSocket</strong> - For real-time communication between frontend and backend.</li>
        <li><strong>FastAPI</strong> - Backend API framework to process audio and communicate with models.</li>
        <li><strong>TensorFlow/PyTorch</strong> - For the machine learning model to classify audio.</li>
        <li><strong>ffmpeg</strong> - For audio file conversion and preprocessing.</li>
      </ul>

      <h2 id="setup-instructions" className="text-2xl font-semibold text-blue-500 mt-8">Setup Instructions</h2>
      <h3 className="text-xl font-semibold text-gray-800 mt-4">Prerequisites</h3>
      <p className="text-lg text-gray-700 mb-4">
        Before you begin, ensure you have the following installed:
      </p>
      <ul className="list-disc pl-6 text-gray-700">
        <li><strong>Node.js</strong> and <strong>npm</strong> (or <strong>yarn</strong>)</li>
        <li><strong>React</strong> and <strong>TypeScript</strong> development environment set up.</li>
      </ul>

      <h3 className="text-xl font-semibold text-gray-800 mt-4">Installation</h3>
      <ol className="list-decimal pl-8 text-gray-700 mb-4">
        <li>Clone the repository:</li>
        <pre className="bg-gray-100 p-4 rounded-md"><code>git clone https://github.com/your-repo/deepfake-audio-detection.git</code></pre>
        <li>Install dependencies:</li>
        <pre className="bg-gray-100 p-4 rounded-md"><code>npm install</code></pre>
        Or, using yarn:
        <pre className="bg-gray-100 p-4 rounded-md"><code>yarn install</code></pre>
        <li>Configure environment variables (if needed):</li>
        <pre className="bg-gray-100 p-4 rounded-md"><code>REACT_APP_BACKEND_URL="http://localhost:8000"</code></pre>
      </ol>

      <h2 id="folder-structure" className="text-2xl font-semibold text-blue-500 mt-8">Folder Structure</h2>
      <pre className="bg-gray-100 p-4 rounded-md">
        <code>
{`/src
  /components
    /AudioRecorder.tsx      # Audio recording UI component
    /AudioPlayer.tsx        # Audio playback UI component
    /DetectionResult.tsx    # Displays result of the classification (Real/Fake)
  /utils
    /api.ts                 # API call utilities
    /websocket.ts           # WebSocket utilities for real-time streaming
  /assets
  /styles
public
  index.html
  favicon.ico`}
        </code>
      </pre>

      <h2 id="components-overview" className="text-2xl font-semibold text-blue-500 mt-8">Components Overview</h2>
      <h3 className="text-xl font-semibold text-gray-800 mt-4">1. AudioRecorder.tsx</h3>
      <p className="text-lg text-gray-700 mb-4">
        This component records audio in 5-second intervals. It starts recording when the user clicks a "Start" button 
        and automatically stops after 5 seconds. The recorded audio is then sent to the backend server.
      </p>

      <h3 className="text-xl font-semibold text-gray-800 mt-4">2. AudioPlayer.tsx</h3>
      <p className="text-lg text-gray-700 mb-4">
        Once an audio file is sent to the server and classified, this component allows the user to play back the recorded audio file.
      </p>

      <h3 className="text-xl font-semibold text-gray-800 mt-4">3. DetectionResult.tsx</h3>
      <p className="text-lg text-gray-700 mb-4">
        After receiving a response from the backend, this component displays whether the recorded audio is <strong>Real</strong> or <strong>Fake</strong>.
      </p>

      <h2 id="api-integration" className="text-2xl font-semibold text-blue-500 mt-8">API Integration</h2>
      <p className="text-lg text-gray-700 mb-4">
        The frontend interacts with the backend server using REST API calls and WebSocket for real-time interaction. 
        Below is the basic structure of how the API integration works:
      </p>

      <h3 className="text-xl font-semibold text-gray-800 mt-4">Fetch API for sending the audio:</h3>
      <pre className="bg-gray-100 p-4 rounded-md">
        <code>{`import { sendAudioData } from './utils/api';

const sendAudioToServer = async (audioBlob: Blob) => {
  try {
    const result = await sendAudioData(audioBlob);
    console.log('Audio processed:', result);
  } catch (error) {
    console.error('Error sending audio:', error);
  }
};`}</code>
      </pre>

      <h3 className="text-xl font-semibold text-gray-800 mt-4">WebSocket for real-time data:</h3>
      <pre className="bg-gray-100 p-4 rounded-md">
        <code>{`import { startWebSocket } from './utils/websocket';

const ws = startWebSocket('ws://localhost:8000');

ws.onmessage = (message) => {
  const result = JSON.parse(message.data);
  console.log('Audio classification:', result);
};`}</code>
      </pre>

      <h2 id="websocket-integration" className="text-2xl font-semibold text-blue-500 mt-8">WebSocket Integration</h2>
      <p className="text-lg text-gray-700 mb-4">
        WebSockets are used to stream live audio from the frontend to the backend in real-time. The backend processes the audio using a trained model and sends the result back to the frontend.
      </p>

      <h2 id="running-the-application" className="text-2xl font-semibold text-blue-500 mt-8">Running the Application</h2>
      <h3 className="text-xl font-semibold text-gray-800 mt-4">Starting the Frontend:</h3>
      <ol className="list-decimal pl-8 text-gray-700 mb-4">
        <li>In the project directory, run:</li>
        <pre className="bg-gray-100 p-4 rounded-md"><code>npm start</code></pre>
        <li>This will start the development server and open the application in the default web browser.</li>
      </ol>

      <h3 className="text-xl font-semibold text-gray-800 mt-4">Starting the Backend:</h3>
      <ol className="list-decimal pl-8 text-gray-700 mb-4">
        <li>Ensure you have the FastAPI server running on your local machine or cloud.</li>
        <li>Install the required dependencies:</li>
        <pre className="bg-gray-100 p-4 rounded-md"><code>pip install fastapi uvicorn websockets</code></pre>
        <li>Start the backend server:</li>
        <pre className="bg-gray-100 p-4 rounded-md"><code>uvicorn backend.main:app --reload</code></pre>
      </ol>

      <h2 id="usage" className="text-2xl font-semibold text-blue-500 mt-8">Usage</h2>
      <ol className="list-decimal pl-8 text-gray-700 mb-4">
        <li><strong>Record Audio</strong>: Click the "Start Recording" button to start recording the audio. The frontend will record for 5 seconds.</li>
        <li><strong>Send Audio to Server</strong>: After recording, the audio is automatically sent to the backend for processing.</li>
        <li><strong>View Results</strong>: After processing, the classification (Real or Fake) will be displayed on the UI.</li>
        <li><strong>Playback</strong>: You can also play back the recorded audio.</li>
      </ol>

      <h2 id="future-improvements" className="text-2xl font-semibold text-blue-500 mt-8">Future Improvements</h2>
      <ul className="list-disc pl-6 text-gray-700">
        <li><strong>User Authentication</strong>: Add user authentication to store results and preferences.</li>
        <li><strong>Multiple Model Support</strong>: Integrate different models to classify deepfake audio.</li>
        <li><strong>Enhanced UI/UX</strong>: Improve the user interface to provide more insights and analytics on the audio classification.</li>
      </ul>
    </div>
  );
};

export default Docs;
